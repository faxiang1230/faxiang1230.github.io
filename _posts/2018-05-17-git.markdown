---
layout:     post
title:      "为什么使用git"
date:       2018-05-17 20:40:45
author:     "faxiang1230"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
  - git
---
# 为什么使用git
为什么我们要拥抱git呢?我们为什么花费精力去学习git的命令呢?  
PS:我几乎没有使用过svn进行版本管理工具，所以没有去和svn进行对比  
有人可能没有使用过版本管理工具，认为它太复杂，还需要花费相当大的精力来学习命令,仍然使用文件夹整体备份的方式来  
## git的优势
大量的开源项目使用git来做版本管理:linux kernel,android,busybox  
github上托管的大量开源项目,目前是开放的圈子，不过作品数量太多，需要花费相当大的精力来找到合适的项目  
## git在工程中的应用
临时切换工作:  
当在同一个工程下，有多个任务时，你正在处理问题A,修改到一半，测试说出现了一个紧急BUG需要修复，现在你怎么办?  
git stash:  
git branch:  
git checkout:  
git revert:  
在Linux内核社区中linus说过这样一句话:`READ THE FUCK SOURCE CODE(RTFSC)`,带着点色彩，不过很贴近事实。  
linux内核开发注重这样一条原则，`代码就是最好的注释`,一般的代码他们是不屑于写注释的，只有完成复杂功能的代码才需要注释。  
当你阅读代码的时候，你很可能遇到非常多的不解的问题，如果你能找到人及时回到你的问题，恭喜你，太幸运了。不过很多时候我们需要自己去看一下代码，
作者在提交代码的时候往往是按照功能提交的，一个patch包含了功能完整的代码(理想状况),你可以找到这个patch的所有代码观察修改的那些位置，非常有用的方式。  
查看代码的意义:  
git log:  
git blame:  

你的机器运行着内核版本3.10,你想要升级到3.18试试功能A是否好用，然后你原来的功能B不好用了，然后你需要查这个问题。你对B所涉及的领域不太懂，现学来不及啊，但是提交也太多了，不容易定位问题，那么你可以使用工程中的方法来定位问题:  

在大量提交中找出问题:  
git bisect:  
git reset:  
当你和A合作完成一个功能时，你们两个分工合作，中间需要相互依赖。在某个时间点他想要试试你们两个的功能是否OK了，你可以将你的patch发送给A,然后他打上，你和它的代码就合体了。  
和他人共享修改:  
git diff:  
当你的项目需要保证代码质量时,有人review过你的代码之后才能提交到公共的代码仓库。你可以使用如下的方式将你的patch提取出来发送给其他人，其他人可以在后面加上`Signed-off-by`表示review过了，一直传递到有人合并这个patch。当然有另外的方式gerrit做代码审核，不过你需要花点精力去搭建gerrit嘛。  
多人分布式开发中review:  
git format-patch,git am，git send-email:  

图形化查看:  
gitk:对于新人比较友好的工具，将分支合并轨迹、提交记录可视化显示出来,也保留着搜索等功能，就是太吃资源了，cpu,内存占用较多。    

## git使用规范流程
### 权限问题  
### 提交日志问题  
### 分支问题  
