---
layout:     post
title:      "SimpleVPN"
date:       2018-03-11 23:40:45
author:     "faxiang1230"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
  - network
---
# 简单VPN示例
## 需求背景
A需要所有数据在网络上传输时都必须是经过加密的，以防止其他人窃取隐私，所以需要一种方案能够加密所有的网络数据。其实现有的方案已经有好多了,像openvpn,IPSec,sock5等理论上都是能够达到目的的。下面就是根据openvpn的原理写的简要demo,加解密和密钥相关的可以自己增加。
## 方向
特别感谢大牛[Bomb250](http://blog.csdn.net/dog250/article/details/6964047),虽未谋面但深表佩服。

- 1.怎么能够拦截住用户的所有数据呢  
这个是分场景的，不同的场景需要细微的修改。不过我下面的所有核心都是利用IP层的路由功能和tun网络设备，这里先回顾一下搜索路由表的策略和tun设备的原理:
```
1.搜索匹配的主机地址
2.搜索匹配的网络地址
3.搜索默认路由表
```
tun设备的位置:  
![image](/_posts/images/tun-position.png)  
tun设备实现了两种功能,一种是网络设备,有收发包的能力，注册了net_device接口；另外它还是一种misc设备,可以和用户空间通过`read/write`交互;我们可以通过tun来接收/转发所有的用户流量，向tun中写数据包来模仿物理网络返回的数据包。  
回归正题,拦截所有的网络数据的选择,理论上可以通过匹配主机的方式来拦截数据,不过你不可能知道用户访问的所有地址，所以这个看起来有点不可能，同样的道理匹配网络地址也不可能；就剩下默认路由一种选择了。不过存在一种情况默认路由是拦截不了的:用户和服务器都位于同一个局域网内(无线局域网内，虽然是局域网，但是通过无线传输时是需要加密的),路由查找策略根本就不会走到默认路由表项。此时可以通过`iptables & netfilter`的`nat`模块来做一些地址上的转换使数据包转换到tun设备上。
