---
layout:     post
title:      "201708-201808年个人计划和总结"
subtitle:   "个人计划"
date:       2017-08-01 14:40:45
author:     "faxiang1230"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags: -personal
---

# 个人现状总结
13年毕业，迄今为止工作4年，有时候还找不准自己的定位。
## 中科创达2年3个月
中科创达是我正式工作的开端，说实话对于刚开始工作的开发来说还是蛮不错的，有比较完善的培养体系，也接很多大公司的项目:索尼，夏普,LG等等，工作规范来说还是比较重视的；不过因为是做外包项目，本身赚的就是人力成本差价，所以后期涨薪不是特别给力；我的领导给我涨3k的幅度还是挺大的，基本上相当于跳槽时的正常涨薪了；
- Telephony

干了telephony大概1年吧，framework，qcril，modem的NAS等都做过，不过我老领导盛总说我懂telephony一丢丢，现在想想telephony的也就记得一丢丢了；这部分的工作重点是3GPP的协议部分，这玩意从物理层，链路层，接入层，非接入层等等还是非常复杂的，内容也很多，很吃经验的那种工作；

自我评价：NAS层往上的工作，不论是feature还是bug也好，花费少量时间都是可以完成的；
- Boot

干了高通的boot大概两个月，时间比较短，只能说这段时间我是对高通boot有了大概了解，具体定制的话还得花费较多时间研究的；

评价：初级水准
- power：

干了高通的power大概一年吧，干这部分的工作的时候应该是在linux侧成长最快的阶段，给了我一个系统视图，看问题先站在系统总体结构上来看，问题的分解，细化等等都是我最大的收获；后来项目转移了，没得继续了，给西安的开发做了一场power的报告作为告别；

评价：中级到高级水准，软件上的问题应该都可以找办法解决
- 稳定性：

后来开始干stability大概4个月吧，狂看这方面的书<Binary Debug><Linux Debug>，什么crash，ramdump，堆栈啊了解了一大堆，不过因为时间比较短，应该不是很深入吧；没有碰到过非常困难的问题，只能说定位和解决一般性问题吧；

评价：稳定性问题直观了解，中级水平吧
## 清华大学计算机系1年2个月
转移到这里之后干的工作都很杂，各种工作都做，相对来说工作还是比较顺利；各种工作都是平行进行吧，也实在不好分解；
- 稳定性：

处理了大概有6-8个重启的问题吧，出问题的各部分都是很难处理的，应该是厂家来处理最好的那种，有一半的工作都是workaround来解决的，没有解决驱动本身的问题；在这时其实最难的应该是怎么抓dump吧，kdump不好使，kdb有自身问题的限制，只有一个pstore还算稳定，不过只能抓到最后的panic信息，然后用addr2line，objdump配合解决。

评价：一般稳定性问题还OK，能fix掉
- 性能：

中间间隔着做了一些performance的调研吧：framework的，app的，kernel的；这个过程中吐槽一下，明明都是应用开发时不好好看android的开发手册和性能调优手册，在那瞎写代码，只管功能不管性能，留下一堆烂摊子，我对应用开发也不是很精通，所以对应用的性能也不能提供更多的建议；android的systrace工具机理分析过，基本上是使用的ftrace的功能，这个工具最精彩的点是数据分析，数据图形化显示，不清楚具体代码怎么写的；啰嗦一句，数据的图形化表示真的非常重要和实用，帮助开发脱离重复的数据分析，最有名的是bredan gregg的火焰图。然后也学习了kprobe，ftrace的实现机制，不过很遗憾我太懒了，啥都没留下，几个月之后啥都想不起来了；用了一段时间的systemtap，ebpf，perf，狂啃了两遍Brendan Gregg的性能之巅；和power一样对于系统的整体性能有一些了解，但是在性能这块还是比较缺乏具体的工作实践；出现性能问题最大的地方一般是应用，特别是数据库，其他大型应用部分，这块就完全没有研究过内部机理了；

评价：入门节吧，有背景知识积累，但是没有特别多的经验

- shell：

狂写了两三个月的shell，确实是提高工作效率的大杀器

评价：满足日常开发需求，提升工作效率，能够满足中型的需求

- git：

充当了一段时间的SCM，对于git，repo的常用操作比较熟，也自己整了一套的repo，gerrit环境，能够满足百人开发需求吧；更多开发人员的话，权限管理细化，安全，代码分支管理等工作应该有更多要求吧；

评价：合格的代码运维人员，离高级还差一些距离吧

- x86体系：

对于x86体系有一丢丢的了解，应该是对BIOS,UEFI,grub,grub2那套东西有了一个基本了解；副作用:装机装多了,ubuntu,OPENTHOS,window，arch捣鼓双系统，多系统等等；自己也整过将G4L从legacy启动到UEFI启动方式的变更(修改内核配置，找靠谱的grub2,修改busybox，rootfs制作等等)；还修过服务器，更换设备，网络等等。

评价:合格的系统管理员

- debug：

整过gdb，qemu+gdb debug kernel

评价：gdb入门到熟练中间吧，qemu+gdb更加偏重于实践技能

- Makefile

Android.mk也是一种Makefile,不过直观上看起来差别还是挺大的；集成过系统应用，裁剪系统，自己移植过应用，对Android的编译还是比较有经验的；

评价：Makefile中级水平吧，这个其实就是熟练度问题
- framework

1.当时做双屏克隆模式的时候，可是结结实实啃了一段时间Android graphic，对于怎么绘图啊，buffer传递啊，内存分配还是理解的,概念上理解OPENGL，GLES,理解mesa的整体架构

2.处理过vold的bug，pc上对于U盘来说和手机对于U盘的重视程度是不同的，修复了一些bug；实打实地了解vold的工作原理，还是蛮简单的

3.处理过PMS和PM的问题，对这里的基本业务还是比较熟的；

评价：framework的东西基本上是一些代码逻辑上的理解，可以cover住大部分问题

## 综合自我反思：
做过的和会的还是挺多的，代码上的问题应该可以放一放，最多不会的花点时间就可以解决；
但是问题也满多的：

1.如果让我去涉及一个应用也好，服务也好，我对于架构的理解实在是相当肤浅，应该是没有得到过几个应用的精髓

2.很多的工作难度不在于代码而在于背景知识，例如multimedia部分，需要了解多媒体常见格式封装(mpeg,mp4,avi等)，常见的编解码库(h264,h263),常见的GPU的内部单元及工作机理(intel，nvdia，amd等和他们在一些drm，mesa，drm driver中的存在)，常见的中间件(stagefright,ffmpeg plugins);audio部分就不再提了

3.对于很多硬件的工作机理不熟：USB协议，PCI驱动，IIC，SPI等都不熟，稳定性和功耗出问题最多的也是驱动部分，这些问题还得专业的驱动开发来解决

4.对于内核子系统核心不熟，只能是理解个50%的机理，但是细节掌握不够；大面上的问题能够解决，但是很多是需要专家级的知识深度的，我欠缺

我现在只能成为工作的一部分而不是一个活动计算机

## 个人计划
赚钱养家的同时，尽量找个项目，不管赚钱与否都能够弥补自己的短板；目前是打算跟着wowotech的xproject整一把。

如果有机会，深入掌握两门高级语言：python(perl太灵活了，不适合我)，lua
